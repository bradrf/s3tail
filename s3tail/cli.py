'''
Utility to help "tail" AWS logs stored in S3 generated by S3 bucket
logging or ELB logging.
'''

import click
import sys
import signal
import errno
import logging
import re

from boto import s3

from .s3tail import S3Tail

@click.command()
@click.option('-r', '--region', type=click.Choice(r.name for r in s3.regions()),
              help='AWS region to use when connecting')
@click.option('-b', '--bookmark', help='Bookmark of last key:line shown')
@click.option('-l', '--log-level', type=click.Choice(['debug','info','warning','error','critical']),
              help='set logging level', default='info')
@click.option('--log-file', metavar='FILENAME',
              help='write logs to FILENAME', default='STDOUT')
@click.option('--cache-hours', type=int, default=24,
              help='Number of hours to keep in cache before removing on next run')
@click.argument('s3_uri')
def main(region, bookmark, log_level, log_file, cache_hours, s3_uri):
    '''Begins tailing files found at [s3://]BUCKET[/PREFIX]'''

    s3_uri = re.sub(r'^(s3:)?/+', '', s3_uri)
    bucket, prefix = s3_uri.split('/', 1)

    log_kwargs = {
        'level': getattr(logging, log_level.upper())
    }
    if log_file != 'STDOUT':
        log_kwargs['filename'] = log_file
    logging.basicConfig(**log_kwargs)
    logger = logging.getLogger('s3tail')

    class Track:
        tail = None
        last_key = None
        last_num = None
        show_pick_up = bookmark != None

    def signal_handler(signal, frame):
        logger.info('Stopped processing at %s:%d', Track.last_key, Track.last_num)
        logger.info('Bookmark: %s', tail.get_bookmark())
        sys.exit(0)
    signal.signal(signal.SIGINT, signal_handler)

    def progress(key):
        Track.last_key = key
        logger.info('Starting %s', key)
        return True

    def dump(num, line):
        Track.last_num = num
        if Track.show_pick_up:
            logger.info('Picked up at line %s', num)
            Track.show_pick_up = False
        click.echo(line)

    tail = S3Tail(bucket, prefix, dump,
                  key_handler=progress, bookmark=bookmark,
                  region=region, hours=cache_hours)
    try:
        tail.watch()
    except IOError as exc:
        if exc.errno != errno.EPIPE:
            raise
        logger.info('Interrupted pipe. Bookmark: %s', tail.get_bookmark())
        sys.exit(0) # just exit if piped to something that has terminated (i.e. head or tail)

    logger.info('No more logs. Bookmark: %s', tail.get_bookmark())
    sys.exit(0)

if __name__ == '__main__':
    main()
